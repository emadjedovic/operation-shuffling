Reading the input stream from the console or a file has O(N) complexity for N lines (operations). The time complexity is primarily determined by the main obfuscate() function, which essentially reduces to topSortWithShuffle().

To find dependencies (edges) for a single input/output variable, we need no more than O(1) because we use a hash map. Therefore, if the average number of input variables is i and the average number of output variables is o, for N operations, we get a complexity of O(N*(i+o)).

Topological sorting requires O(N+E) time, where N is the number of operations, and E is the number of edges (dependencies).

The shuffling internally uses the Fisher-Yates algorithm, which requires O(N) time for N operations.

All in all, we have a complexity of O(N*(i+o)) + O(N+E+N). Given that E can, in the worst case, reach up to N^2, the total time complexity is O(N*(i+o) + N^2).
